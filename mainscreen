import tkinter as tk
from tkinter import messagebox
import mariadb

class CursosApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Sistema de Cursos")
        self.root.geometry("400x300")
        
        # Crear botones
        tk.Button(self.root, text="Perfil", command=self.perfil, width=20, height=2).pack(pady=10)
        tk.Button(self.root, text="Inscribirme en un Curso", command=self.inscribir, width=20, height=2).pack(pady=10)
        tk.Button(self.root, text="Generar PDF", command=self.generar_pdf, width=20, height=2).pack(pady=10)
        tk.Button(self.root, text="Mis Cursos", command=self.mis_cursos, width=20, height=2).pack(pady=10)
        tk.Button(self.root, text="Cerrar App", command=self.cerrar, width=20, height=2).pack(pady=10)
    
    def conectar_bd(self):
        try:
            conn = mariadb.connect(
                host='localhost',
                user='root',
                password='',
                database='MiBaseDatos'
            )
            return conn
        except:
            messagebox.showerror("Error", "No se pudo conectar a la base de datos")
            return None
    
    def perfil(self):
        ventana = tk.Toplevel(self.root)
        ventana.title("Perfil")
        ventana.geometry("300x200")
        
        tk.Label(ventana, text="Nombre:").pack(pady=5)
        nombre = tk.Entry(ventana)
        nombre.pack(pady=5)
        
        tk.Label(ventana, text="Email:").pack(pady=5)
        email = tk.Entry(ventana)
        email.pack(pady=5)
        
        def guardar():
            conn = self.conectar_bd()
            if conn:
                cursor = conn.cursor()
                try:
                    cursor.execute("INSERT INTO usuarios (nombre, email) VALUES (?, ?)", 
                                 (nombre.get(), email.get()))
                    conn.commit()
                    messagebox.showinfo("Éxito", "Perfil guardado")
                    ventana.destroy()
                except:
                    messagebox.showerror("Error", "Error al guardar")
                conn.close()
        
        tk.Button(ventana, text="Guardar", command=guardar).pack(pady=10)
    
    def inscribir(self):
        ventana = tk.Toplevel(self.root)
        ventana.title("Inscribir Curso")
        ventana.geometry("300x200")
        
        tk.Label(ventana, text="Cursos disponibles:").pack(pady=10)
        
        listbox = tk.Listbox(ventana)
        listbox.pack(pady=10)
        
        # Mostrar cursos
        conn = self.conectar_bd()
        if conn:
            cursor = conn.cursor()
            cursor.execute("SELECT nombre FROM cursos")
            cursos = cursor.fetchall()
            for curso in cursos:
                listbox.insert(tk.END, curso[0])
            conn.close()
        
        def inscribirse():
            if listbox.curselection():
                curso = listbox.get(listbox.curselection())
                messagebox.showinfo("Inscripción", f"Inscrito en: {curso}")
                ventana.destroy()
            else:
                messagebox.showwarning("Aviso", "Selecciona un curso")
        
        tk.Button(ventana, text="Inscribirse", command=inscribirse).pack(pady=10)
    
    def generar_pdf(self):
        # Simulación simple de PDF
        with open("cursos.txt", "w") as f:
            f.write("REPORTE DE CURSOS\n")
            f.write("=================\n\n")
            
            conn = self.conectar_bd()
            if conn:
                cursor = conn.cursor()
                cursor.execute("SELECT nombre, precio FROM cursos")
                cursos = cursor.fetchall()
                for curso in cursos:
                    f.write(f"Curso: {curso[0]} - Precio: ${curso[1]}\n")
                conn.close()
        
        messagebox.showinfo("PDF", "Archivo generado: cursos.txt")
    
    def mis_cursos(self):
        ventana = tk.Toplevel(self.root)
        ventana.title("Mis Cursos")
        ventana.geometry("300x200")
        
        tk.Label(ventana, text="Mis cursos inscritos:").pack(pady=10)
        
        listbox = tk.Listbox(ventana)
        listbox.pack(pady=10)
        
        # Mostrar cursos (simulado)
        cursos = ["Python Básico", "Web Development"]
        for curso in cursos:
            listbox.insert(tk.END, curso)
    
    def cerrar(self):
        if messagebox.askyesno("Confirmar", "¿Cerrar aplicación?"):
            self.root.quit()
    
    def run(self):
        self.root.mainloop()

# Ejecutar aplicación
if __name__ == "__main__":
    app = CursosApp()
    app.run()
